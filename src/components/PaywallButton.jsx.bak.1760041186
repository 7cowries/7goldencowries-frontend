// src/components/PaywallButton.jsx
import React, { useCallback, useState } from "react";
import useWallet from "../hooks/useWallet";

/**
 * A generic paywall/subscription button that ensures the user is connected,
 * then calls an optional onPay/onSubscribe callback supplied by the parent.
 *
 * Props:
 * - label?: string
 * - className?: string
 * - onPay?: (account) => Promise<void> | void   // optional
 */
export default function PaywallButton({
  label = "Subscribe",
  className = "",
  onPay,
}) {
  const { isConnected, account, connect, disconnect, connecting } = useWallet();
  const [busy, setBusy] = useState(false);
  const short = (addr) =>
    String(addr).slice(0, 6) + "…" + String(addr).slice(-4);

  const handleClick = useCallback(async () => {
    setBusy(true);
    try {
      if (!isConnected) {
        await walletConnect();
      }
      // user is connected now; run payment/subscription flow if provided
      if (typeof onPay === "function") {
        await onPay(account);
      }
    } finally {
      setBusy(false);
    }
  }, [isConnected, connect, onPay, account]);

  const handleDisconnect = useCallback(async () => {
    setBusy(true);
    try {
      await disconnect();
    } finally {
      setBusy(false);
    }
  }, [disconnect]);

  if (isConnected && account?.account?.address) {
    const addr = account.account.address;
    return (
      <div className={`paywall-button ${className}`} style={{ display: "flex", gap: 8 }}>
        <button onClick={handleClick} disabled={busy || connecting}>
          {busy ? "Processing…" : label}
        </button>
        <button onClick={handleDisconnect} disabled={busy || connecting} title="Disconnect wallet">
          {busy ? "…" : `Disconnect (${short(addr)})`}
        </button>
      </div>
    );
  }

  // not connected yet
  return (
    <button className={`paywall-button ${className}`} onClick={handleClick} disabled={busy || connecting}>
      {busy || connecting ? "Connecting…" : "Connect Wallet to Continue"}
    </button>
  );
}
